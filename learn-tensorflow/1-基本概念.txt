tensorflow是一个开源分布式数值计算框架，主要用于减少在实现神经网络的过程中那些令人感到痛苦的细节，如计算神经网络权重的梯度
TensorFlow使用计算统一设备架构（CUDA）来进一步有效实现这种数值计算，CUDA是由NVIDIA引入的并行计算平台
TensorFlow非常善于创建一个包含所有依赖关系和操作的计算图，它可以确切地知道数据是如何及什么时候在哪里流转，但是，应该有一个元素可以有效执行定义好的计算图，使TensorFlow变得更好，这个元素就是会话。

一些概念的理解：
输入：用来训练和测试算法的数据
变量：可变的张量，大部分用于定义算法的参数
输出：不可变的张量，用于存储中间和最终的输出
操作：对输入做不同的变换以产生想要的输出

在创建变量时，需要注意以下几点：
1）变量形状
2）数据类型
3）初始值
4）名称（可选）

数据类型在决定变量大小方面起着重要作用。有许多不同的数据类型，包括常用的tf.bool、tf.uint8、tf.float32和tf.int32。每种数据类型都需要一定的比特数来表示该类型的值。例如，tf.uint8需要8比特，而tf.float32需要32比特。通常的做法是使用相同的数据类型进行计算，否则会导致数据类型不匹配。因此，如果你有两个不同数据类型的张量，则需要对它们做数据类型转换，因而必须使用tf.cast（…）操作将一个张量显式转换为另一个类型的张量。tf.cast（…）操作就是为了应对这种情况而设计的。例如，如果有一个tf.int32类型的x变量，需要将其转换为tf.float32，则可以通过tf.cast（x, dtype = tf.float32）将x转换为tf.float32。

变量需要用初始值进行初始化。为方便起见，TensorFlow提供了几种不同的初始化器，包括常数初始化器和正态分布初始化器。以下是一些可用于初始化变量的流行TensorFlow初始化器：

● tf.zeros
● tf.constant_initializer
● tf.random_uniform
● tf.truncated_normal

最后，我们会将变量的名称用作ID在图中标识该变量。因此，如果你可视化计算图，那么变量将显示为传递给name关键字的参数。如果未指定名称，TensorFlow将使用默认命名方案。

神经网络中两种常用的非线性激活：
tf.nn.sigmoid(x,name=None)
tf.nn.relu(x,name=None)



