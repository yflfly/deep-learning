1、基本概念
镜像是Docker三大核心概念中最重要的。Docker运行容器前需要本地存在对应的镜像，如果镜像不存在，Docker会尝试先从默认镜像仓库下载，用户也可以通过配置，使用自定义的镜像仓库

2、获取镜像
可以使用docker [image] pull命令直接从Docker Hub镜像源来下载镜像。该命令的格式为docker [image] pull NAME[:TAG]。其中，NAME是镜像仓库名称（用来区分镜像）, TAG是镜像的标签（往往用来表示版本信息）。通常情况下，描述一个镜像需要包括“名称+标签”信息。

例如，获取一个Ubuntu 18.04系统的基础镜像可以使用如下的命令：
docker pull ubuntu:18.04

对于Docker镜像来说，如果不显式指定TAG，则默认会选择latest标签，这会下载仓库中最新版本的镜像。下面的例子将从Docker Hub的Ubuntu仓库下载一个最新版本的Ubuntu操作系统的镜像：
docker pull ubuntu
该命令实际上下载的就是ubuntu:latest镜像。

注意：
一般来说，镜像的latest标签意味着该镜像的内容会跟踪最新版本的变更而变化，内容是不稳定的。因此，从稳定性上考虑，不要在生产环境中忽略镜像的标签信息或使用默认的latest标记的镜像。

下载过程中可以看出，镜像文件一般由若干层（layer）组成，6c953ac5d795这样的串是层的唯一id（实际上完整的id包括256比特，64个十六进制字符组成）。使用docker pull命令下载中会获取并输出镜像的各层信息。当不同的镜像包括相同的层时，本地仅存储了层的一份内容，减小了存储空间。

pull子命令支持的选项主要包括：❑ -a, --all-tags=true|false：是否获取仓库中的所有镜像，默认为否；❑ --disable-content-trust：取消镜像的内容校验，默认为真。另外，有时需要使用镜像代理服务来加速Docker镜像获取过程，可以在Docker服务启动配置中增加--registry-mirror=proxy_URL来指定镜像代理服务地址（如https://registry.docker-cn.com）。

下载镜像到本地后，即可随时使用该镜像了，例如利用该镜像创建一个容器，在其中运行bash应用，执行打印“Hello World”命令：

docker run -it ubuntu:18.04 bash
echo "hello world"
exit

3、查看镜像信息

1)使用images命令列出镜像
使用 docker images 或 docker image ls命令可以列出本地主机上已有镜像的基本信息

在列出信息中，可以看到几个字段信息：
❑ 来自于哪个仓库，比如ubuntu表示ubuntu系列的基础镜像；
❑ 镜像的标签信息，比如18.04、latest表示不同的版本信息。标签只是标记，并不能标识镜像内容；
❑ 镜像的ID（唯一标识镜像），如果两个镜像的ID相同，说明它们实际上指向了同一个镜像，只是具有不同标签名称而已；
❑ 创建时间，说明镜像最后的更新时间；
❑ 镜像大小，优秀的镜像往往体积都较小。

其中镜像的ID信息十分重要，它唯一标识了镜像。在使用镜像ID的时候，一般可以使用该ID的前若干个字符组成的可区分串来替代完整的ID。

TAG信息用于标记来自同一个仓库的不同镜像。例如ubuntu仓库中有多个镜像，通过TAG信息来区分发行版本，如18.04、18.10等。

镜像大小信息只是表示了该镜像的逻辑体积大小，实际上由于相同的镜像层本地只会存储一份，物理上占用的存储空间会小于各镜像逻辑体积之和。

images子命令主要支持如下选项，用户可以自行进行尝试：
❑ -a, --all=true|false：列出所有（包括临时文件）镜像文件，默认为否；
❑ --digests=true|false：列出镜像的数字摘要值，默认为否；
❑ -f, --filter=[]：过滤列出的镜像，如dangling=true只显示没有被使用的镜像；也可指定带有特定标注的镜像等；
❑ --format="TEMPLATE"：控制输出格式，如．ID代表ID信息，.Repository代表仓库信息等；
❑ --no-trunc=true|false：对输出结果中太长的部分是否进行截断，如镜像的ID信息，默认为是；
❑ -q, --quiet=true|false：仅输出ID信息，默认为否。

2)使用tag命令添加镜像标签
为了方便在后续工作中使用特定镜像，还可以使用docker tag命令来为本地镜像任意添加新的标签。例如，添加一个新的myubuntu:latest镜像标签：
docker tag ubuntu:latest myubuntu:latest

3)使用inspect命令查看详细信息
使用docker[image]inspect命令可以获取该镜像的详细信息，包括制作者、适应架构、各层的数字摘要等

4)使用history命令查看镜像历史
既然镜像文件由多个层组成，那么怎么知道各个层的内容具体是什么呢？这时候可以使用history子命令，该命令将列出各层的创建信息。
例如，查看ubuntu:18.04镜像的创建过程，可以使用如下命令：
docker history ubuntu:18.04





